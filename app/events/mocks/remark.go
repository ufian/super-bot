// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/radio-t/super-bot/app/bot/openai"
	"sync"
)

// RemarkClient is a mock implementation of events.remark.
//
//	func TestSomethingThatUsesremark(t *testing.T) {
//
//		// make and configure a mocked events.remark
//		mockedremark := &RemarkClient{
//			GetTopCommentsFunc: func(link string) ([]rtutils.RemarkComment, error) {
//				panic("mock out the GetTopComments method")
//			},
//		}
//
//		// use mockedremark in code that requires events.remark
//		// and then make assertions.
//
//	}
type RemarkClient struct {
	// GetTopCommentsFunc mocks the GetTopComments method.
	GetTopCommentsFunc func(link string) ([]openai.RemarkComment, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetTopComments holds details about calls to the GetTopComments method.
		GetTopComments []struct {
			// Link is the link argument value.
			Link string
		}
	}
	lockGetTopComments sync.RWMutex
}

// GetTopComments calls GetTopCommentsFunc.
func (mock *RemarkClient) GetTopComments(link string) ([]openai.RemarkComment, error) {
	if mock.GetTopCommentsFunc == nil {
		panic("RemarkClient.GetTopCommentsFunc: method is nil but remark.GetTopComments was just called")
	}
	callInfo := struct {
		Link string
	}{
		Link: link,
	}
	mock.lockGetTopComments.Lock()
	mock.calls.GetTopComments = append(mock.calls.GetTopComments, callInfo)
	mock.lockGetTopComments.Unlock()
	return mock.GetTopCommentsFunc(link)
}

// GetTopCommentsCalls gets all the calls that were made to GetTopComments.
// Check the length with:
//
//	len(mockedremark.GetTopCommentsCalls())
func (mock *RemarkClient) GetTopCommentsCalls() []struct {
	Link string
} {
	var calls []struct {
		Link string
	}
	mock.lockGetTopComments.RLock()
	calls = mock.calls.GetTopComments
	mock.lockGetTopComments.RUnlock()
	return calls
}
